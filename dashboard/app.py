from flask import Flask, render_template, jsonify, request
import mysql.connector
import traceback

app = Flask(__name__)

# ---------------------------------------------------
# Database Connection
# ---------------------------------------------------
def get_db_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="",  # change if needed
        database="bookmyshow"
    )

# ---------------------------------------------------
# Function Metadata (for UI hints)
# ---------------------------------------------------
FUNCTION_METADATA = {
    "getAvailableSeats": {
        "description": "Returns the number of available seats for a given show ID.",
        "params": ["show_id"]
    },
    "getBookingTotal": {
        "description": "Returns the total amount paid for a booking.",
        "params": ["booking_id"]
    },
    "getChargerSeatCount": {
        "description": "Returns number of chargeable seats in a show.",
        "params": ["show_id"]
    },
    "getMovieRating": {
        "description": "Fetches the rating for a specific movie.",
        "params": ["movie_id"]
    },
    "getMovieRevenue": {
        "description": "Returns total revenue generated by a movie.",
        "params": ["movie_id"]
    },
    "getPaymentStatus": {
        "description": "Checks payment status for a booking.",
        "params": ["payment_id"]
    },
    "getTheaterLocation": {
        "description": "Returns location of a theater.",
        "params": ["theater_id"]
    },
    "getTotalEarningsByTheater": {
        "description": "Calculates total earnings of a specific theater.",
        "params": ["theater_id"]
    },
    "getUpcomingShows": {
        "description": "Lists shows scheduled after a given date.",
        "params": ["date"]
    },
    "getUserAge": {
        "description": "Returns the age of a user.",
        "params": ["user_id"]
    }
}

# ---------------------------------------------------
# Homepage (Unified Dashboard)
# ---------------------------------------------------
@app.route('/')
def home():
    try:
        conn = get_db_connection()
        cursor = conn.cursor()

        cursor.execute("SELECT DISTINCT genre FROM movies")
        genres = [row[0] for row in cursor.fetchall()]

        cursor.execute("SELECT DISTINCT language FROM movies")
        languages = [row[0] for row in cursor.fetchall()]

        cursor.execute("SHOW FUNCTION STATUS WHERE Db = 'bookmyshow'")
        functions = [row[1] for row in cursor.fetchall()]

        conn.close()

        options = {
            "genres": genres,
            "languages": languages,
            "functions": functions
        }
        return render_template("index.html", options=options)
    except Exception as e:
        print("❌ Error loading homepage:", e)
        traceback.print_exc()
        return "Database connection failed.", 500


# ---------------------------------------------------
# API: Fetch movies
# ---------------------------------------------------
@app.route("/api/movies", methods=["POST"])
def get_movies():
    try:
        data = request.json
        genre = data.get("genre", "")
        language = data.get("language", "")
        search = data.get("search", "")
        sort = data.get("sort", "release_date")
        page = int(data.get("page", 1))
        limit = 50
        offset = (page - 1) * limit

        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)

        query = "SELECT * FROM movies WHERE 1=1"
        params = []

        if genre and genre != "All":
            query += " AND genre = %s"
            params.append(genre)
        if language and language != "All":
            query += " AND language = %s"
            params.append(language)
        if search:
            query += " AND title LIKE %s"
            params.append(f"%{search}%")

        if sort == "Latest Releases":
            query += " ORDER BY release_date DESC"
        elif sort == "Top Rated":
            query += " ORDER BY rating DESC"
        else:
            query += " ORDER BY title ASC"

        query += f" LIMIT {limit} OFFSET {offset}"

        cursor.execute(query, params)
        movies = cursor.fetchall()

        cursor.execute("SELECT COUNT(*) AS total FROM movies")
        total = cursor.fetchone()["total"]

        conn.close()
        return jsonify({"movies": movies, "total": total})

    except Exception as e:
        print("❌ Error fetching movies:", e)
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


# ---------------------------------------------------
# API: Function info for UI hints
# ---------------------------------------------------
@app.route('/api/function_info/<func_name>')
def get_function_info(func_name):
    info = FUNCTION_METADATA.get(func_name)
    if info:
        return jsonify(info)
    return jsonify({"error": "Function not found"}), 404


# ---------------------------------------------------
# API: Execute MySQL Function
# ---------------------------------------------------
@app.route('/api/execute_function', methods=['POST'])
def execute_function():
    try:
        data = request.json
        func_name = data.get('function')
        args = data.get('args', [])

        conn = get_db_connection()
        cursor = conn.cursor()

        placeholders = ', '.join(['%s'] * len(args))
        query = f"SELECT {func_name}({placeholders})" if placeholders else f"SELECT {func_name}()"

        cursor.execute(query, args)
        result = cursor.fetchone()
        conn.close()

        return jsonify({"result": result[0] if result else "No result returned"})
    except Exception as e:
        print("❌ Error executing MySQL function:", e)
        traceback.print_exc()
        return jsonify({"error": str(e)}), 500


# ---------------------------------------------------
# Health Check
# ---------------------------------------------------
@app.route('/health')
def health():
    return "Backend is running successfully! ✅"


if __name__ == '__main__':
    app.run(debug=True)
